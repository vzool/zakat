window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "zakat", "modulename": "zakat", "kind": "module", "doc": "<p>_____     _         _     _     _ _<br />\n|__  /__ _| | ____ _| |_  | |   (_) |__  _ __ __ _ _ __ _   _ \n  / // _<code>| |/ / _</code> | __| | |   | | '_ \\| '__/ _` | '__| | | |\n / /| (_| |   &lt; (_| | |_  | |___| | |_) | | | (_| | |  | |_| |\n/______,_|_|___,_|__| |_____|_|_.__/|_|  __,_|_|   __, |\n                                                        |___/ </p>\n\n<p>\"\u0631\u064e\u0628\u0651\u064e\u0646\u064e\u0627 \u0627\u0641\u0652\u062a\u064e\u062d\u0652 \u0628\u064e\u064a\u0652\u0646\u064e\u0646\u064e\u0627 \u0648\u064e\u0628\u064e\u064a\u0652\u0646\u064e \u0642\u064e\u0648\u0652\u0645\u0650\u0646\u064e\u0627 \u0628\u0650\u0627\u0644\u0652\u062d\u064e\u0642\u0651\u0650 \u0648\u064e\u0623\u064e\u0646\u062a\u064e \u062e\u064e\u064a\u0652\u0631\u064f \u0627\u0644\u0652\u0641\u064e\u0627\u062a\u0650\u062d\u0650\u064a\u0646\u064e (89)\" -- \u0633\u0648\u0631\u0629 \u0627\u0644\u0623\u0639\u0631\u0627\u0641\n... Never Trust, Always Verify ...</p>\n\n<p>This file provides the ZakatLibrary classes, functions for tracking and calculating Zakat.</p>\n"}, {"fullname": "zakat.ZakatTracker", "modulename": "zakat", "qualname": "ZakatTracker", "kind": "class", "doc": "<p>A class for tracking and calculating Zakat.</p>\n\n<p>This class provides functionalities for recording transactions, calculating Zakat due,\nand managing account balances. It also offers features like importing transactions from\nCSV files, exporting data to JSON format, and saving/loading the tracker state.</p>\n\n<p>The <code>ZakatTracker</code> class is designed to handle both positive and negative transactions,\nallowing for flexible tracking of financial activities related to Zakat. It also supports\nthe concept of a \"Nisab\" (minimum threshold for Zakat) and a \"haul\" (complete one year for Transaction) can calculate Zakat due\nbased on the current silver price.</p>\n\n<p>The class uses a camel file as its database to persist the tracker state,\nensuring data integrity across sessions. It also provides options for enabling or\ndisabling history tracking, allowing users to choose their preferred level of detail.</p>\n\n<p>In addition, the <code>ZakatTracker</code> class includes various helper methods like\n<code>time</code>, <code>time_to_datetime</code>, <code>lock</code>, <code>free</code>, <code>recall</code>, <code>export_json</code>,\nand more. These methods provide additional functionalities and flexibility\nfor interacting with and managing the Zakat tracker.</p>\n\n<p>Attributes:\n    ZakatTracker.ZakatCut (function): A function to calculate the Zakat percentage.\n    ZakatTracker.TimeCycle (function): A function to determine the time cycle for Zakat.\n    ZakatTracker.Nisab (function): A function to calculate the Nisab based on the silver price.\n    ZakatTracker.Version (function): The version of the ZakatTracker class.</p>\n\n<p>Data Structure:\n    The ZakatTracker class utilizes a nested dictionary structure called \"_vault\" to store and manage data.</p>\n\n<pre><code>_vault (dict):\n    - account (dict):\n        - {account_number} (dict):\n            - balance (int): The current balance of the account.\n            - box (dict): A dictionary storing transaction details.\n                - {timestamp} (dict):\n                    - capital (int): The initial amount of the transaction.\n                    - count (int): The number of times Zakat has been calculated for this transaction.\n                    - last (int): The timestamp of the last Zakat calculation.\n                    - rest (int): The remaining amount after Zakat deductions and withdrawal.\n                    - total (int): The total Zakat deducted from this transaction.\n            - count (int): The total number of transactions for the account.\n            - log (dict): A dictionary storing transaction logs.\n                - {timestamp} (dict):\n                    - value (int): The transaction amount (positive or negative).\n                    - desc (str): The description of the transaction.\n                    - ref (int): The box reference (positive or None).\n                    - file (dict): A dictionary storing file references associated with the transaction.\n            - hide (bool): Indicates whether the account is hidden or not.\n            - zakatable (bool): Indicates whether the account is subject to Zakat.\n    - exchange (dict):\n        - account (dict):\n            - {timestamps} (dict):\n                - rate (float): Exchange rate when compared to local currency.\n                - description (str): The description of the exchange rate.\n    - history (dict):\n        - {timestamp} (list): A list of dictionaries storing the history of actions performed.\n            - {action_dict} (dict):\n                - action (Action): The type of action (CREATE, TRACK, LOG, SUB, ADD_FILE, REMOVE_FILE, BOX_TRANSFER, EXCHANGE, REPORT, ZAKAT).\n                - account (str): The account number associated with the action.\n                - ref (int): The reference number of the transaction.\n                - file (int): The reference number of the file (if applicable).\n                - key (str): The key associated with the action (e.g., 'rest', 'total').\n                - value (int): The value associated with the action.\n                - math (MathOperation): The mathematical operation performed (if applicable).\n    - lock (int or None): The timestamp indicating the current lock status (None if not locked).\n    - report (dict):\n        - {timestamp} (tuple): A tuple storing Zakat report details.\n</code></pre>\n"}, {"fullname": "zakat.ZakatTracker.__init__", "modulename": "zakat", "qualname": "ZakatTracker.__init__", "kind": "function", "doc": "<p>Initialize ZakatTracker with database path and history mode.</p>\n\n<p>Parameters:\ndb_path (str): The path to the database file. Default is \"zakat.camel\".\nhistory_mode (bool): The mode for tracking history. Default is True.</p>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./zakat_db/zakat.camel&#39;</span>, </span><span class=\"param\"><span class=\"n\">history_mode</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "zakat.ZakatTracker.Version", "modulename": "zakat", "qualname": "ZakatTracker.Version", "kind": "function", "doc": "<p>Returns the current version of the software.</p>\n\n<p>This function returns a string representing the current version of the software,\nincluding major, minor, and patch version numbers in the format \"X.Y.Z\".</p>\n\n<p>Returns:\nstr: The current version of the software.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.ZakatCut", "modulename": "zakat", "qualname": "ZakatTracker.ZakatCut", "kind": "function", "doc": "<p>Calculates the Zakat amount due on an asset.</p>\n\n<p>This function calculates the zakat amount due on a given asset value over one lunar year.\nZakat is an Islamic obligatory alms-giving, calculated as a fixed percentage of an individual's wealth\nthat exceeds a certain threshold (Nisab).</p>\n\n<p>Parameters:\nx: The total value of the asset on which Zakat is to be calculated.</p>\n\n<p>Returns:\nThe amount of Zakat due on the asset, calculated as 2.5% of the asset's value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.TimeCycle", "modulename": "zakat", "qualname": "ZakatTracker.TimeCycle", "kind": "function", "doc": "<p>Calculates the approximate duration of a lunar year in nanoseconds.</p>\n\n<p>This function calculates the approximate duration of a lunar year based on the given number of days.\nIt converts the given number of days into nanoseconds for use in high-precision timing applications.</p>\n\n<p>Parameters:\ndays: The number of days in a lunar year. Defaults to 355,\n      which is an approximation of the average length of a lunar year.</p>\n\n<p>Returns:\nThe approximate duration of a lunar year in nanoseconds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">days</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">355</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.Nisab", "modulename": "zakat", "qualname": "ZakatTracker.Nisab", "kind": "function", "doc": "<p>Calculate the total value of Nisab (a unit of weight in Islamic jurisprudence) based on the given price per gram.</p>\n\n<p>This function calculates the Nisab value, which is the minimum threshold of wealth,\nthat makes an individual liable for paying Zakat.\nThe Nisab value is determined by the equivalent value of a specific amount\nof gold or silver (currently 595 grams in silver) in the local currency.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>gram_price (float): The price per gram of Nisab.</li>\n<li>gram_quantity (float): The quantity of grams in a Nisab. Default is 595 grams of silver.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>float: The total value of Nisab based on the given price per gram.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gram_price</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">gram_quantity</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">595</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.ext", "modulename": "zakat", "qualname": "ZakatTracker.ext", "kind": "function", "doc": "<p>Returns the file extension used by the ZakatTracker class.</p>\n\n<p>Returns:\nstr: The file extension used by the ZakatTracker class, which is 'camel'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.path", "modulename": "zakat", "qualname": "ZakatTracker.path", "kind": "function", "doc": "<p>Set or get the path to the database file.</p>\n\n<p>If no path is provided, the current path is returned.\nIf a path is provided, it is set as the new path.\nThe function also creates the necessary directories if the provided path is a file.</p>\n\n<p>Parameters:\npath (str): The new path to the database file. If not provided, the current path is returned.</p>\n\n<p>Returns:\nstr: The current or new path to the database file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.base_path", "modulename": "zakat", "qualname": "ZakatTracker.base_path", "kind": "function", "doc": "<p>Generate a base path by joining the provided arguments with the existing base path.</p>\n\n<p>Parameters:\n*args (str): Variable length argument list of strings to be joined with the base path.</p>\n\n<p>Returns:\nstr: The generated base path. If no arguments are provided, the existing base path is returned.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.scale", "modulename": "zakat", "qualname": "ZakatTracker.scale", "kind": "function", "doc": "<p>Scales a numerical value by a specified power of 10, returning an integer.</p>\n\n<p>This function is designed to handle various numeric types (<code>float</code>, <code>int</code>, or <code>Decimal</code>) and\nfacilitate precise scaling operations, particularly useful in financial or scientific calculations.</p>\n\n<p>Parameters:\nx: The numeric value to scale. Can be a floating-point number, integer, or decimal.\ndecimal_places: The exponent for the scaling factor (10**y). Defaults to 2, meaning the input is scaled\n    by a factor of 100 (e.g., converts 1.23 to 123).</p>\n\n<p>Returns:\nThe scaled value, rounded to the nearest integer.</p>\n\n<p>Raises:\nTypeError: If the input <code>x</code> is not a valid numeric type.</p>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ZakatTracker</span><span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"p\">(</span><span class=\"mf\">3.14159</span><span class=\"p\">)</span>\n<span class=\"go\">314</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ZakatTracker</span><span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">,</span> <span class=\"n\">decimal_places</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">1234000</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ZakatTracker</span><span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"p\">(</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s2\">&quot;0.005&quot;</span><span class=\"p\">),</span> <span class=\"n\">decimal_places</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">50</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span>, </span><span class=\"param\"><span class=\"n\">decimal_places</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.unscale", "modulename": "zakat", "qualname": "ZakatTracker.unscale", "kind": "function", "doc": "<p>Unscales an integer by a power of 10.</p>\n\n<p>Parameters:\nx: The integer to unscale.\nreturn_type: The desired type for the returned value. Can be float, int, or Decimal. Defaults to float.\ndecimal_places: The power of 10 to use. Defaults to 2.</p>\n\n<p>Returns:\nThe unscaled number, converted to the specified return_type.</p>\n\n<p>Raises:\nTypeError: If the return_type is not float or Decimal.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\treturn_type: type = &lt;class &#x27;float&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">decimal_places</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.reset", "modulename": "zakat", "qualname": "ZakatTracker.reset", "kind": "function", "doc": "<p>Reset the internal data structure to its initial state.</p>\n\n<p>Parameters:\nNone</p>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.minimum_time_diff_ns", "modulename": "zakat", "qualname": "ZakatTracker.minimum_time_diff_ns", "kind": "function", "doc": "<p>Calculates the minimum time difference between two consecutive calls to\n<code>ZakatTracker._time()</code> in nanoseconds.</p>\n\n<p>This method is used internally to determine the minimum granularity of\ntime measurements within the system.</p>\n\n<p>Returns:\ntuple[int, int]:\n    - The minimum time difference in nanoseconds.\n    - The number of iterations required to measure the difference.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.time", "modulename": "zakat", "qualname": "ZakatTracker.time", "kind": "function", "doc": "<p>Generates a unique, monotonically increasing timestamp based on the provided\ndatetime object or the current datetime.</p>\n\n<p>This method ensures that timestamps are unique even if called in rapid succession\nby introducing a small delay if necessary, based on the system's minimum\ntime resolution.</p>\n\n<p>Parameters:\nnow (datetime.datetime, optional): The datetime object to generate the timestamp from.\nIf not provided, the current datetime is used.</p>\n\n<p>Returns:\nint: The unique timestamp in nanoseconds since the epoch (January 1, 1AD).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">now</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.time_to_datetime", "modulename": "zakat", "qualname": "ZakatTracker.time_to_datetime", "kind": "function", "doc": "<p>Converts a nanosecond-precision timestamp (ordinal number of nanoseconds since 1AD)\nback to a datetime object.</p>\n\n<p>Parameters:\nordinal_ns (int): The timestamp in nanoseconds since the epoch (January 1, 1AD).</p>\n\n<p>Returns:\ndatetime.datetime: The corresponding datetime object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ordinal_ns</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.clean_history", "modulename": "zakat", "qualname": "ZakatTracker.clean_history", "kind": "function", "doc": "<p>Cleans up the history of actions performed on the ZakatTracker instance.</p>\n\n<p>Parameters:\nlock (int, optional): The lock ID is used to clean up the empty history.\n    If not provided, it cleans up the empty history records for all locks.</p>\n\n<p>Returns:\nint: The number of locks cleaned up.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lock</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.nolock", "modulename": "zakat", "qualname": "ZakatTracker.nolock", "kind": "function", "doc": "<p>Check if the vault lock is currently not set.</p>\n\n<p>Returns:\nbool: True if the vault lock is not set, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.lock", "modulename": "zakat", "qualname": "ZakatTracker.lock", "kind": "function", "doc": "<p>Acquires a lock on the ZakatTracker instance.</p>\n\n<p>Returns:\nint: The lock ID. This ID can be used to release the lock later.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.vault", "modulename": "zakat", "qualname": "ZakatTracker.vault", "kind": "function", "doc": "<p>Returns a copy of the internal vault dictionary.</p>\n\n<p>This method is used to retrieve the current state of the ZakatTracker object.\nIt provides a snapshot of the internal data structure, allowing for further\nprocessing or analysis.</p>\n\n<p>Returns:\ndict: A copy of the internal vault dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.stats_init", "modulename": "zakat", "qualname": "ZakatTracker.stats_init", "kind": "function", "doc": "<p>Initialize and return a dictionary containing initial statistics for the ZakatTracker instance.</p>\n\n<p>The dictionary contains two keys: 'database' and 'ram'. Each key maps to a tuple containing two elements:</p>\n\n<ul>\n<li>The initial size of the respective statistic in bytes (int).</li>\n<li>The initial size of the respective statistic in a human-readable format (str).</li>\n</ul>\n\n<p>Returns:\ndict[str, tuple]: A dictionary with initial statistics for the ZakatTracker instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.stats", "modulename": "zakat", "qualname": "ZakatTracker.stats", "kind": "function", "doc": "<p>Calculates and returns statistics about the object's data storage.</p>\n\n<p>This method determines the size of the database file on disk and the\nsize of the data currently held in RAM (likely within a dictionary).\nBoth sizes are reported in bytes and in a human-readable format\n(e.g., KB, MB).</p>\n\n<p>Parameters:\nignore_ram (bool): Whether to ignore the RAM size. Default is True</p>\n\n<p>Returns:\ndict[str, tuple]: A dictionary containing the following statistics:</p>\n\n<pre><code>* 'database': A tuple with two elements:\n    - The database file size in bytes (int).\n    - The database file size in human-readable format (str).\n* 'ram': A tuple with two elements:\n    - The RAM usage (dictionary size) in bytes (int).\n    - The RAM usage in human-readable format (str).\n</code></pre>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">my_object</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">stats</span><span class=\"p\">[</span><span class=\"s1\">&#39;database&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">(256000, &#39;250.0 KB&#39;)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">stats</span><span class=\"p\">[</span><span class=\"s1\">&#39;ram&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">(12345, &#39;12.1 KB&#39;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ignore_ram</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.files", "modulename": "zakat", "qualname": "ZakatTracker.files", "kind": "function", "doc": "<p>Retrieves information about files associated with this class.</p>\n\n<p>This class method provides a standardized way to gather details about\nfiles used by the class for storage, snapshots, and CSV imports.</p>\n\n<p>Returns:\nlist[dict[str, str | int]]: A list of dictionaries, each containing information\n    about a specific file:</p>\n\n<pre><code>* type (str): The type of file ('database', 'snapshot', 'import_csv').\n* path (str): The full file path.\n* exists (bool): Whether the file exists on the filesystem.\n* size (int): The file size in bytes (0 if the file doesn't exist).\n* human_readable_size (str): A human-friendly representation of the file size (e.g., '10 KB', '2.5 MB').\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>file_info = MyClass.files()\nfor info in file_info:\n    print(f\"Type: {info['type']}, Exists: {info['exists']}, Size: {info['human_readable_size']}\")\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.steps", "modulename": "zakat", "qualname": "ZakatTracker.steps", "kind": "function", "doc": "<p>Returns a copy of the history of steps taken in the ZakatTracker.</p>\n\n<p>The history is a dictionary where each key is a unique identifier for a step,\nand the corresponding value is a dictionary containing information about the step.</p>\n\n<p>Returns:\ndict: A copy of the history of steps taken in the ZakatTracker.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.free", "modulename": "zakat", "qualname": "ZakatTracker.free", "kind": "function", "doc": "<p>Releases the lock on the database.</p>\n\n<p>Parameters:\nlock (int): The lock ID to be released.\nauto_save (bool): Whether to automatically save the database after releasing the lock.</p>\n\n<p>Returns:\nbool: True if the lock is successfully released and (optionally) saved, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lock</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">auto_save</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.account_exists", "modulename": "zakat", "qualname": "ZakatTracker.account_exists", "kind": "function", "doc": "<p>Check if the given account exists in the vault.</p>\n\n<p>Parameters:\naccount (str): The account number to check.</p>\n\n<p>Returns:\nbool: True if the account exists, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.box_size", "modulename": "zakat", "qualname": "ZakatTracker.box_size", "kind": "function", "doc": "<p>Calculate the size of the box for a specific account.</p>\n\n<p>Parameters:\naccount (str): The account number for which the box size needs to be calculated.</p>\n\n<p>Returns:\nint: The size of the box for the given account. If the account does not exist, -1 is returned.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.log_size", "modulename": "zakat", "qualname": "ZakatTracker.log_size", "kind": "function", "doc": "<p>Get the size of the log for a specific account.</p>\n\n<p>Parameters:\naccount (str): The account number for which the log size needs to be calculated.</p>\n\n<p>Returns:\nint: The size of the log for the given account. If the account does not exist, -1 is returned.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.file_hash", "modulename": "zakat", "qualname": "ZakatTracker.file_hash", "kind": "function", "doc": "<p>Calculates the hash of a file using the specified algorithm.</p>\n\n<p>Parameters:\nfile_path (str): The path to the file.\nalgorithm (str, optional): The hashing algorithm to use. Defaults to \"blake2b\".</p>\n\n<p>Returns:\nstr: The hexadecimal representation of the file's hash.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">algorithm</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;blake2b&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.snapshot_cache_path", "modulename": "zakat", "qualname": "ZakatTracker.snapshot_cache_path", "kind": "function", "doc": "<p>Generate the path for the cache file used to store snapshots.</p>\n\n<p>The cache file is a camel file that stores the timestamps of the snapshots.\nThe file name is derived from the main database file name by replacing the \".camel\" extension with \".snapshots.camel\".</p>\n\n<p>Returns:\nstr: The path to the cache file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.snapshot", "modulename": "zakat", "qualname": "ZakatTracker.snapshot", "kind": "function", "doc": "<p>This function creates a snapshot of the current database state.</p>\n\n<p>The function calculates the hash of the current database file and checks if a snapshot with the same hash already exists.\nIf a snapshot with the same hash exists, the function returns True without creating a new snapshot.\nIf a snapshot with the same hash does not exist, the function creates a new snapshot by saving the current database state\nin a new camel file with a unique timestamp as the file name. The function also updates the snapshot cache file with the new snapshot's hash and timestamp.</p>\n\n<p>Parameters:\nNone</p>\n\n<p>Returns:\nbool: True if a snapshot with the same hash already exists or if the snapshot is successfully created. False if the snapshot creation fails.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.snapshots", "modulename": "zakat", "qualname": "ZakatTracker.snapshots", "kind": "function", "doc": "<p>Retrieve a dictionary of snapshots, with their respective hashes, paths, and existence status.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>hide_missing (bool): If True, only include snapshots that exist in the dictionary. Default is True.</li>\n<li>verified_hash_only (bool): If True, only include snapshots with a valid hash. Default is False.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>dict[int, tuple[str, str, bool]]: A dictionary where the keys are the timestamps of the snapshots,\nand the values are tuples containing the snapshot's hash, path, and existence status.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">hide_missing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">verified_hash_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.recall", "modulename": "zakat", "qualname": "ZakatTracker.recall", "kind": "function", "doc": "<p>Revert the last operation.</p>\n\n<p>Parameters:\ndry (bool): If True, the function will not modify the data, but will simulate the operation. Default is True.\ndebug (bool): If True, the function will print debug information. Default is False.</p>\n\n<p>Returns:\nbool: True if the operation was successful, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dry</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.ref_exists", "modulename": "zakat", "qualname": "ZakatTracker.ref_exists", "kind": "function", "doc": "<p>Check if a specific reference (transaction) exists in the vault for a given account and reference type.</p>\n\n<p>Parameters:\naccount (str): The account number for which to check the existence of the reference.\nref_type (str): The type of reference (e.g., 'box', 'log', etc.).\nref (int): The reference (transaction) number to check for existence.</p>\n\n<p>Returns:\nbool: True if the reference exists for the given account and reference type, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ref_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.box_exists", "modulename": "zakat", "qualname": "ZakatTracker.box_exists", "kind": "function", "doc": "<p>Check if a specific box (transaction) exists in the vault for a given account and reference.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>account (str): The account number for which to check the existence of the box.</li>\n<li>ref (int): The reference (transaction) number to check for existence.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>bool: True if the box exists for the given account and reference, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.track", "modulename": "zakat", "qualname": "ZakatTracker.track", "kind": "function", "doc": "<p>This function tracks a transaction for a specific account.</p>\n\n<p>Parameters:\nunscaled_value (float | int | Decimal): The value of the transaction. Default is 0.\ndesc (str): The description of the transaction. Default is an empty string.\naccount (str): The account for which the transaction is being tracked. Default is '1'.\nlogging (bool): Whether to log the transaction. Default is True.\ncreated (int): The timestamp of the transaction. If not provided, it will be generated. Default is None.\ndebug (bool): Whether to print debug information. Default is False.</p>\n\n<p>Returns:\nint: The timestamp of the transaction.</p>\n\n<p>This function creates a new account if it doesn't exist, logs the transaction if logging is True, and updates the account's balance and box.</p>\n\n<p>Raises:\nValueError: The log transaction happened again in the same nanosecond time.\nValueError: The box transaction happened again in the same nanosecond time.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unscaled_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">desc</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">account</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">logging</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">created</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.log_exists", "modulename": "zakat", "qualname": "ZakatTracker.log_exists", "kind": "function", "doc": "<p>Checks if a specific transaction log entry exists for a given account.</p>\n\n<p>Parameters:\naccount (str): The account number associated with the transaction log.\nref (int): The reference to the transaction log entry.</p>\n\n<p>Returns:\nbool: True if the transaction log entry exists, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.exchange", "modulename": "zakat", "qualname": "ZakatTracker.exchange", "kind": "function", "doc": "<p>This method is used to record or retrieve exchange rates for a specific account.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>account (str): The account number for which the exchange rate is being recorded or retrieved.</li>\n<li>created (int): The timestamp of the exchange rate. If not provided, the current timestamp will be used.</li>\n<li>rate (float): The exchange rate to be recorded. If not provided, the method will retrieve the latest exchange rate.</li>\n<li>description (str): A description of the exchange rate.</li>\n<li>debug (bool): Whether to print debug information. Default is False.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>dict: A dictionary containing the latest exchange rate and its description. If no exchange rate is found,\nit returns a dictionary with default values for the rate and description.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">account</span>,</span><span class=\"param\">\t<span class=\"n\">created</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.exchange_calc", "modulename": "zakat", "qualname": "ZakatTracker.exchange_calc", "kind": "function", "doc": "<p>This function calculates the exchanged amount of a currency.</p>\n\n<p>Args:\n    x (float): The original amount of the currency.\n    x_rate (float): The exchange rate of the original currency.\n    y_rate (float): The exchange rate of the target currency.</p>\n\n<p>Returns:\n    float: The exchanged amount of the target currency.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">x_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.exchanges", "modulename": "zakat", "qualname": "ZakatTracker.exchanges", "kind": "function", "doc": "<p>Retrieve the recorded exchange rates for all accounts.</p>\n\n<p>Parameters:\nNone</p>\n\n<p>Returns:\ndict: A dictionary containing all recorded exchange rates.\nThe keys are account names or numbers, and the values are dictionaries containing the exchange rates.\nEach exchange rate dictionary has timestamps as keys and exchange rate details as values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.accounts", "modulename": "zakat", "qualname": "ZakatTracker.accounts", "kind": "function", "doc": "<p>Returns a dictionary containing account numbers as keys and their respective balances as values.</p>\n\n<p>Parameters:\nNone</p>\n\n<p>Returns:\ndict: A dictionary where keys are account numbers and values are their respective balances.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.boxes", "modulename": "zakat", "qualname": "ZakatTracker.boxes", "kind": "function", "doc": "<p>Retrieve the boxes (transactions) associated with a specific account.</p>\n\n<p>Parameters:\naccount (str): The account number for which to retrieve the boxes.</p>\n\n<p>Returns:\ndict: A dictionary containing the boxes associated with the given account.\nIf the account does not exist, an empty dictionary is returned.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.logs", "modulename": "zakat", "qualname": "ZakatTracker.logs", "kind": "function", "doc": "<p>Retrieve the logs (transactions) associated with a specific account.</p>\n\n<p>Parameters:\naccount (str): The account number for which to retrieve the logs.</p>\n\n<p>Returns:\ndict: A dictionary containing the logs associated with the given account.\nIf the account does not exist, an empty dictionary is returned.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.daily_logs_init", "modulename": "zakat", "qualname": "ZakatTracker.daily_logs_init", "kind": "function", "doc": "<p>Initialize a dictionary to store daily, weekly, monthly, and yearly logs.</p>\n\n<p>Returns:\ndict: A dictionary with keys 'daily', 'weekly', 'monthly', and 'yearly', each containing an empty dictionary.\n    Later each key maps to another dictionary, which will store the logs for the corresponding time period.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.daily_logs", "modulename": "zakat", "qualname": "ZakatTracker.daily_logs", "kind": "function", "doc": "<p>Retrieve the daily logs (transactions) from all accounts.</p>\n\n<p>The function groups the logs by day, month, and year, and calculates the total value for each group.\nIt returns a dictionary where the keys are the timestamps of the daily groups,\nand the values are dictionaries containing the total value and the logs for that group.</p>\n\n<p>Parameters:\nweekday (WeekDay): Select the weekday is collected for the week data. Default is WeekDay.Friday.\ndebug (bool): Whether to print debug information. Default is False.</p>\n\n<p>Returns:\ndict: A dictionary containing the daily logs.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span> <span class=\"o\">=</span> <span class=\"n\">ZakatTracker</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"s1\">&#39;desc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;account1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ref</span> <span class=\"o\">=</span> <span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">track</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">&#39;desc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;account2&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">add_file</span><span class=\"p\">(</span><span class=\"s1\">&#39;account2&#39;</span><span class=\"p\">,</span> <span class=\"n\">ref</span><span class=\"p\">,</span> <span class=\"s1\">&#39;file_0&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">add_file</span><span class=\"p\">(</span><span class=\"s1\">&#39;account2&#39;</span><span class=\"p\">,</span> <span class=\"n\">ref</span><span class=\"p\">,</span> <span class=\"s1\">&#39;file_1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">add_file</span><span class=\"p\">(</span><span class=\"s1\">&#39;account2&#39;</span><span class=\"p\">,</span> <span class=\"n\">ref</span><span class=\"p\">,</span> <span class=\"s1\">&#39;file_2&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">daily_logs</span><span class=\"p\">()</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;daily&#39;: {</span>\n<span class=\"go\">        &#39;2024-06-30&#39;: {</span>\n<span class=\"go\">            &#39;positive&#39;: 100,</span>\n<span class=\"go\">            &#39;negative&#39;: 51,</span>\n<span class=\"go\">            &#39;total&#39;: 99,</span>\n<span class=\"go\">            &#39;rows&#39;: [</span>\n<span class=\"go\">                {</span>\n<span class=\"go\">                    &#39;account&#39;: &#39;account1&#39;,</span>\n<span class=\"go\">                    &#39;desc&#39;: &#39;desc&#39;,</span>\n<span class=\"go\">                    &#39;file&#39;: {},</span>\n<span class=\"go\">                    &#39;ref&#39;: None,</span>\n<span class=\"go\">                    &#39;value&#39;: -51,</span>\n<span class=\"go\">                    &#39;time&#39;: 1690977015000000000,</span>\n<span class=\"go\">                    &#39;transfer&#39;: False,</span>\n<span class=\"go\">                },</span>\n<span class=\"go\">                {</span>\n<span class=\"go\">                    &#39;account&#39;: &#39;account2&#39;,</span>\n<span class=\"go\">                    &#39;desc&#39;: &#39;desc&#39;,</span>\n<span class=\"go\">                    &#39;file&#39;: {</span>\n<span class=\"go\">                        1722919011626770944: &#39;file_0&#39;,</span>\n<span class=\"go\">                        1722919011626812928: &#39;file_1&#39;,</span>\n<span class=\"go\">                        1722919011626846976: &#39;file_2&#39;,</span>\n<span class=\"go\">                    },</span>\n<span class=\"go\">                    &#39;ref&#39;: None,</span>\n<span class=\"go\">                    &#39;value&#39;: 100,</span>\n<span class=\"go\">                    &#39;time&#39;: 1690977015000000000,</span>\n<span class=\"go\">                    &#39;transfer&#39;: False,</span>\n<span class=\"go\">                },</span>\n<span class=\"go\">            ],</span>\n<span class=\"go\">        },</span>\n<span class=\"go\">    },</span>\n<span class=\"go\">    &#39;weekly&#39;: {</span>\n<span class=\"go\">        datetime: {</span>\n<span class=\"go\">            &#39;positive&#39;: 100,</span>\n<span class=\"go\">            &#39;negative&#39;: 51,</span>\n<span class=\"go\">            &#39;total&#39;: 99,</span>\n<span class=\"go\">        },</span>\n<span class=\"go\">    },</span>\n<span class=\"go\">    &#39;monthly&#39;: {</span>\n<span class=\"go\">        &#39;2024-06&#39;: {</span>\n<span class=\"go\">            &#39;positive&#39;: 100,</span>\n<span class=\"go\">            &#39;negative&#39;: 51,</span>\n<span class=\"go\">            &#39;total&#39;: 99,</span>\n<span class=\"go\">        },</span>\n<span class=\"go\">    },</span>\n<span class=\"go\">    &#39;yearly&#39;: {</span>\n<span class=\"go\">        2024: {</span>\n<span class=\"go\">            &#39;positive&#39;: 100,</span>\n<span class=\"go\">            &#39;negative&#39;: 51,</span>\n<span class=\"go\">            &#39;total&#39;: 99,</span>\n<span class=\"go\">        },</span>\n<span class=\"go\">    },</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">weekday</span><span class=\"p\">:</span> <span class=\"n\">zakat</span><span class=\"o\">.</span><span class=\"n\">zakat_tracker</span><span class=\"o\">.</span><span class=\"n\">WeekDay</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">WeekDay</span><span class=\"o\">.</span><span class=\"n\">Friday</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.add_file", "modulename": "zakat", "qualname": "ZakatTracker.add_file", "kind": "function", "doc": "<p>Adds a file reference to a specific transaction log entry in the vault.</p>\n\n<p>Parameters:\naccount (str): The account number associated with the transaction log.\nref (int): The reference to the transaction log entry.\npath (str): The path of the file to be added.</p>\n\n<p>Returns:\nint: The reference of the added file. If the account or transaction log entry does not exist, returns 0.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.remove_file", "modulename": "zakat", "qualname": "ZakatTracker.remove_file", "kind": "function", "doc": "<p>Removes a file reference from a specific transaction log entry in the vault.</p>\n\n<p>Parameters:\naccount (str): The account number associated with the transaction log.\nref (int): The reference to the transaction log entry.\nfile_ref (int): The reference of the file to be removed.</p>\n\n<p>Returns:\nbool: True if the file reference is successfully removed, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">file_ref</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.balance", "modulename": "zakat", "qualname": "ZakatTracker.balance", "kind": "function", "doc": "<p>Calculate and return the balance of a specific account.</p>\n\n<p>Parameters:\naccount (str): The account number. Default is '1'.\ncached (bool): If True, use the cached balance. If False, calculate the balance from the box. Default is True.</p>\n\n<p>Returns:\nint: The balance of the account.</p>\n\n<p>Note:\nIf cached is True, the function returns the cached balance.\nIf cached is False, the function calculates the balance from the box by summing up the 'rest' values of all box items.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">cached</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.hide", "modulename": "zakat", "qualname": "ZakatTracker.hide", "kind": "function", "doc": "<p>Check or set the hide status of a specific account.</p>\n\n<p>Parameters:\naccount (str): The account number.\nstatus (bool, optional): The new hide status. If not provided, the function will return the current status.</p>\n\n<p>Returns:\nbool: The current or updated hide status of the account.</p>\n\n<p>Raises:\nNone</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span> <span class=\"o\">=</span> <span class=\"n\">ZakatTracker</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ref</span> <span class=\"o\">=</span> <span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">track</span><span class=\"p\">(</span><span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"s1\">&#39;desc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;account1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">hide</span><span class=\"p\">(</span><span class=\"s1\">&#39;account1&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Set the hide status of &#39;account1&#39; to True</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">hide</span><span class=\"p\">(</span><span class=\"s1\">&#39;account1&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># Set the hide status of &#39;account1&#39; to True</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">hide</span><span class=\"p\">(</span><span class=\"s1\">&#39;account1&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Get the hide status of &#39;account1&#39; by default</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">hide</span><span class=\"p\">(</span><span class=\"s1\">&#39;account1&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span>, </span><span class=\"param\"><span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.zakatable", "modulename": "zakat", "qualname": "ZakatTracker.zakatable", "kind": "function", "doc": "<p>Check or set the zakatable status of a specific account.</p>\n\n<p>Parameters:\naccount (str): The account number.\nstatus (bool, optional): The new zakatable status. If not provided, the function will return the current status.</p>\n\n<p>Returns:\nbool: The current or updated zakatable status of the account.</p>\n\n<p>Raises:\nNone</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span> <span class=\"o\">=</span> <span class=\"n\">ZakatTracker</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ref</span> <span class=\"o\">=</span> <span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">track</span><span class=\"p\">(</span><span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"s1\">&#39;desc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;account1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">zakatable</span><span class=\"p\">(</span><span class=\"s1\">&#39;account1&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Set the zakatable status of &#39;account1&#39; to True</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">zakatable</span><span class=\"p\">(</span><span class=\"s1\">&#39;account1&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># Set the zakatable status of &#39;account1&#39; to True</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">zakatable</span><span class=\"p\">(</span><span class=\"s1\">&#39;account1&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Get the zakatable status of &#39;account1&#39; by default</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">zakatable</span><span class=\"p\">(</span><span class=\"s1\">&#39;account1&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span>, </span><span class=\"param\"><span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.sub", "modulename": "zakat", "qualname": "ZakatTracker.sub", "kind": "function", "doc": "<p>Subtracts a specified value from an account's balance.</p>\n\n<p>Parameters:\nunscaled_value (float | int | Decimal): The amount to be subtracted.\ndesc (str): A description for the transaction. Defaults to an empty string.\naccount (str): The account from which the value will be subtracted. Defaults to '1'.\ncreated (int): The timestamp of the transaction. If not provided, the current timestamp will be used.\ndebug (bool): A flag indicating whether to print debug information. Defaults to False.</p>\n\n<p>Returns:\ntuple: A tuple containing the timestamp of the transaction and a list of tuples representing the age of each transaction.</p>\n\n<p>If the amount to subtract is greater than the account's balance,\nthe remaining amount will be transferred to a new transaction with a negative value.</p>\n\n<p>Raises:\nValueError: The box transaction happened again in the same nanosecond time.\nValueError: The log transaction happened again in the same nanosecond time.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unscaled_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span>,</span><span class=\"param\">\t<span class=\"n\">desc</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">account</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">created</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.transfer", "modulename": "zakat", "qualname": "ZakatTracker.transfer", "kind": "function", "doc": "<p>Transfers a specified value from one account to another.</p>\n\n<p>Parameters:\nunscaled_amount (float | int | Decimal): The amount to be transferred.\nfrom_account (str): The account from which the value will be transferred.\nto_account (str): The account to which the value will be transferred.\ndesc (str, optional): A description for the transaction. Defaults to an empty string.\ncreated (int, optional): The timestamp of the transaction. If not provided, the current timestamp will be used.\ndebug (bool): A flag indicating whether to print debug information. Defaults to False.</p>\n\n<p>Returns:\nlist[int]: A list of timestamps corresponding to the transactions made during the transfer.</p>\n\n<p>Raises:\nValueError: Transfer to the same account is forbidden.\nValueError: The box transaction happened again in the same nanosecond time.\nValueError: The log transaction happened again in the same nanosecond time.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unscaled_amount</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span>,</span><span class=\"param\">\t<span class=\"n\">from_account</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">to_account</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">desc</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">created</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.check", "modulename": "zakat", "qualname": "ZakatTracker.check", "kind": "function", "doc": "<p>Check the eligibility for Zakat based on the given parameters.</p>\n\n<p>Parameters:\nsilver_gram_price (float): The price of a gram of silver.\nunscaled_nisab (float | int | Decimal): The minimum amount of wealth required for Zakat. If not provided,\n                it will be calculated based on the silver_gram_price.\ndebug (bool): Flag to enable debug mode.\nnow (int): The current timestamp. If not provided, it will be calculated using ZakatTracker.time().\ncycle (float): The time cycle for Zakat. If not provided, it will be calculated using ZakatTracker.TimeCycle().</p>\n\n<p>Returns:\ntuple: A tuple containing a boolean indicating the eligibility for Zakat, a list of brief statistics,\nand a dictionary containing the Zakat plan.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">silver_gram_price</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">unscaled_nisab</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">now</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cycle</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.build_payment_parts", "modulename": "zakat", "qualname": "ZakatTracker.build_payment_parts", "kind": "function", "doc": "<p>Build payment parts for the Zakat distribution.</p>\n\n<p>Parameters:\nscaled_demand (int): The total demand for payment in local currency.\npositive_only (bool): If True, only consider accounts with positive balance. Default is True.</p>\n\n<p>Returns:\ndict: A dictionary containing the payment parts for each account. The dictionary has the following structure:\n{\n    'account': {\n        'account_id': {'balance': float, 'rate': float, 'part': float},\n        ...\n    },\n    'exceed': bool,\n    'demand': int,\n    'total': float,\n}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scaled_demand</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">positive_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.check_payment_parts", "modulename": "zakat", "qualname": "ZakatTracker.check_payment_parts", "kind": "function", "doc": "<p>Checks the validity of payment parts.</p>\n\n<p>Parameters:\nparts (dict): A dictionary containing payment parts information.\ndebug (bool): Flag to enable debug mode.</p>\n\n<p>Returns:\nint: Returns 0 if the payment parts are valid, otherwise returns the error code.</p>\n\n<p>Error Codes:\n1: 'demand', 'account', 'total', or 'exceed' key is missing in parts.\n2: 'balance', 'rate' or 'part' key is missing in parts['account'][x].\n3: 'part' value in parts['account'][x] is less than 0.\n4: If 'exceed' is False, 'balance' value in parts['account'][x] is less than or equal to 0.\n5: If 'exceed' is False, 'part' value in parts['account'][x] is greater than 'balance' value.\n6: The sum of 'part' values in parts['account'] does not match with 'demand' value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parts</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.zakat", "modulename": "zakat", "qualname": "ZakatTracker.zakat", "kind": "function", "doc": "<p>Perform Zakat calculation based on the given report and optional parts.</p>\n\n<p>Parameters:\nreport (tuple): A tuple containing the validity of the report, the report data, and the zakat plan.\nparts (dict): A dictionary containing the payment parts for the zakat.\ndebug (bool): A flag indicating whether to print debug information.</p>\n\n<p>Returns:\nbool: True if the zakat calculation is successful, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">report</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">parts</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.export_json", "modulename": "zakat", "qualname": "ZakatTracker.export_json", "kind": "function", "doc": "<p>Exports the current state of the ZakatTracker object to a JSON file.</p>\n\n<p>Parameters:\npath (str): The path where the JSON file will be saved. Default is \"data.json\".</p>\n\n<p>Returns:\nbool: True if the export is successful, False otherwise.</p>\n\n<p>Raises:\nNo specific exceptions are raised by this method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;data.json&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.save", "modulename": "zakat", "qualname": "ZakatTracker.save", "kind": "function", "doc": "<p>Saves the ZakatTracker's current state to a camel file.</p>\n\n<p>This method serializes the internal data (<code>_vault</code>).</p>\n\n<p>Parameters:\npath (str, optional): File path for saving. Defaults to a predefined location.</p>\n\n<p>Returns:\nbool: True if the save operation is successful, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.load", "modulename": "zakat", "qualname": "ZakatTracker.load", "kind": "function", "doc": "<p>Load the current state of the ZakatTracker object from a camel file.</p>\n\n<p>Parameters:\npath (str): The path where the camel file is located. If not provided, it will use the default path.</p>\n\n<p>Returns:\nbool: True if the load operation is successful, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.import_csv_cache_path", "modulename": "zakat", "qualname": "ZakatTracker.import_csv_cache_path", "kind": "function", "doc": "<p>Generates the cache file path for imported CSV data.</p>\n\n<p>This function constructs the file path where cached data from CSV imports\nwill be stored. The cache file is a camel file (.camel extension) appended\nto the base path of the object.</p>\n\n<p>Returns:\nstr: The full path to the import CSV cache file.</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>obj = ZakatTracker('/data/reports')\n      obj.import_csv_cache_path()\n          '/data/reports.import_csv.camel'</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.import_csv", "modulename": "zakat", "qualname": "ZakatTracker.import_csv", "kind": "function", "doc": "<p>The function reads the CSV file, checks for duplicate transactions, and creates the transactions in the system.</p>\n\n<p>Parameters:\npath (str): The path to the CSV file. Default is 'file.csv'.\nscale_decimal_places (int): The number of decimal places to scale the value. Default is 0.\ndebug (bool): A flag indicating whether to print debug information.</p>\n\n<p>Returns:\ntuple: A tuple containing the number of transactions created, the number of transactions found in the cache,\n        and a dictionary of bad transactions.</p>\n\n<p>Notes:\n    * Currency Pair Assumption: This function assumes that the exchange rates stored for each account\n                                are appropriate for the currency pairs involved in the conversions.\n    * The exchange rate for each account is based on the last encountered transaction rate that is not equal\n        to 1.0 or the previous rate for that account.\n    * Those rates will be merged into the exchange rates main data, and later it will be used for all subsequent\n      transactions of the same account within the whole imported and existing dataset when doing <code>check</code> and\n      <code>zakat</code> operations.</p>\n\n<p>Example Usage:\n    The CSV file should have the following format, rate is optional per transaction:\n    account, desc, value, date, rate\n    For example:\n    safe-45, \"Some text\", 34872, 1988-06-30 00:00:00, 1</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;file.csv&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">scale_decimal_places</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.human_readable_size", "modulename": "zakat", "qualname": "ZakatTracker.human_readable_size", "kind": "function", "doc": "<p>Converts a size in bytes to a human-readable format (e.g., KB, MB, GB).</p>\n\n<p>This function iterates through progressively larger units of information\n(B, KB, MB, GB, etc.) and divides the input size until it fits within a\nrange that can be expressed with a reasonable number before the unit.</p>\n\n<p>Parameters:\nsize (float): The size in bytes to convert.\ndecimal_places (int, optional): The number of decimal places to display\n    in the result. Defaults to 2.</p>\n\n<p>Returns:\nstr: A string representation of the size in a human-readable format,\n    rounded to the specified number of decimal places. For example:\n        - \"1.50 KB\" (1536 bytes)\n        - \"23.00 MB\" (24117248 bytes)\n        - \"1.23 GB\" (1325899906 bytes)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">decimal_places</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.get_dict_size", "modulename": "zakat", "qualname": "ZakatTracker.get_dict_size", "kind": "function", "doc": "<p>Recursively calculates the approximate memory size of a dictionary and its contents in bytes.</p>\n\n<p>This function traverses the dictionary structure, accounting for the size of keys, values,\nand any nested objects. It handles various data types commonly found in dictionaries\n(e.g., lists, tuples, sets, numbers, strings) and prevents infinite recursion in case\nof circular references.</p>\n\n<p>Parameters:\nobj (dict): The dictionary whose size is to be calculated.\nseen (set, optional): A set used internally to track visited objects\n                     and avoid circular references. Defaults to None.</p>\n\n<p>Returns:\n    float: An approximate size of the dictionary and its contents in bytes.</p>\n\n<p>Note:</p>\n\n<ul>\n<li>This function is a method of the <code>ZakatTracker</code> class and is likely used to\nestimate the memory footprint of data structures relevant to Zakat calculations.</li>\n<li>The size calculation is approximate as it relies on <code>sys.getsizeof()</code>, which might\nnot account for all memory overhead depending on the Python implementation.</li>\n<li>Circular references are handled to prevent infinite recursion.</li>\n<li>Basic numeric types (int, float, complex) are assumed to have fixed sizes.</li>\n<li>String sizes are estimated based on character length and encoding.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">seen</span><span class=\"p\">:</span> <span class=\"nb\">set</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.duration_from_nanoseconds", "modulename": "zakat", "qualname": "ZakatTracker.duration_from_nanoseconds", "kind": "function", "doc": "<p>REF <a href=\"https://github.com/JayRizzo/Random_Scripts/blob/master/time_measure.py#L106\">https://github.com/JayRizzo/Random_Scripts/blob/master/time_measure.py#L106</a>\nConvert NanoSeconds to Human Readable Time Format.\nA NanoSeconds is a unit of time in the International System of Units (SI) equal\nto one millionth (0.000001 or 10\u22126 or 1\u20441,000,000) of a second.\nIts symbol is \u03bcs, sometimes simplified to us when Unicode is not available.\nA microsecond is equal to 1000 nanoseconds or 1\u20441,000 of a millisecond.</p>\n\n<p>INPUT : ms (AKA: MilliSeconds)\nOUTPUT: tuple(string time_lapsed, string spoken_time) like format.\nOUTPUT Variables: time_lapsed, spoken_time</p>\n\n<p>Example  Input: duration_from_nanoseconds(ns)\n<strong>\"Millennium:Century:Years:Days:Hours:Minutes:Seconds:MilliSeconds:MicroSeconds:NanoSeconds\"</strong>\nExample Output: ('039:0001:047:325:05:02:03:456:789:012', ' 39 Millennia,    1 Century,  47 Years,  325 Days,  5 Hours,  2 Minutes,  3 Seconds,  456 MilliSeconds,  789 MicroSeconds,  12 NanoSeconds')\nduration_from_nanoseconds(1234567890123456789012)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ns</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">show_zeros_in_spoken_time</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">spoken_time_separator</span><span class=\"o\">=</span><span class=\"s1\">&#39;,&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">millennia</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Millennia&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">century</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Century&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">years</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Years&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">days</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Days&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Hours&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Minutes&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Seconds&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">milli_seconds</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;MilliSeconds&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">micro_seconds</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;MicroSeconds&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">nano_seconds</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;NanoSeconds&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.day_to_time", "modulename": "zakat", "qualname": "ZakatTracker.day_to_time", "kind": "function", "doc": "<p>Convert a specific day, month, and year into a timestamp.</p>\n\n<p>Parameters:\nday (int): The day of the month.\nmonth (int): The month of the year. Default is 6 (June).\nyear (int): The year. Default is 2024.</p>\n\n<p>Returns:\nint: The timestamp representing the given day, month, and year.</p>\n\n<p>Note:\nThis method assumes the default month and year if not provided.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">day</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>, </span><span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2024</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.generate_random_date", "modulename": "zakat", "qualname": "ZakatTracker.generate_random_date", "kind": "function", "doc": "<p>Generate a random date between two given dates.</p>\n\n<p>Parameters:\nstart_date (datetime.datetime): The start date from which to generate a random date.\nend_date (datetime.datetime): The end date until which to generate a random date.</p>\n\n<p>Returns:\ndatetime.datetime: A random date between the start_date and end_date.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">end_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.generate_random_csv_file", "modulename": "zakat", "qualname": "ZakatTracker.generate_random_csv_file", "kind": "function", "doc": "<p>Generate a random CSV file with specified parameters.</p>\n\n<p>Parameters:\npath (str): The path where the CSV file will be saved. Default is \"data.csv\".\ncount (int): The number of rows to generate in the CSV file. Default is 1000.\nwith_rate (bool): If True, a random rate between 1.2% and 12% is added. Default is False.\ndebug (bool): A flag indicating whether to print debug information.</p>\n\n<p>Returns:\nNone. The function generates a CSV file at the specified path with the given count of rows.\nEach row contains a randomly generated account, description, value, and date.\nThe value is randomly generated between 1000 and 100000,\nand the date is randomly generated between 1950-01-01 and 2023-12-31.\nIf the row number is not divisible by 13, the value is multiplied by -1.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;data.csv&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">with_rate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.create_random_list", "modulename": "zakat", "qualname": "ZakatTracker.create_random_list", "kind": "function", "doc": "<p>Creates a list of random integers whose sum does not exceed the specified maximum.</p>\n\n<p>Args:\n    max_sum: The maximum allowed sum of the list elements.\n    min_value: The minimum possible value for an element (inclusive).\n    max_value: The maximum possible value for an element (inclusive).</p>\n\n<p>Returns:\n    A list of random integers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_sum</span>, </span><span class=\"param\"><span class=\"n\">min_value</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">max_value</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "zakat.ZakatTracker.test", "modulename": "zakat", "qualname": "ZakatTracker.test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.test", "modulename": "zakat", "qualname": "test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "zakat.Action", "modulename": "zakat", "qualname": "Action", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "zakat.Action.CREATE", "modulename": "zakat", "qualname": "Action.CREATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.CREATE: 1&gt;"}, {"fullname": "zakat.Action.TRACK", "modulename": "zakat", "qualname": "Action.TRACK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.TRACK: 2&gt;"}, {"fullname": "zakat.Action.LOG", "modulename": "zakat", "qualname": "Action.LOG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.LOG: 3&gt;"}, {"fullname": "zakat.Action.SUB", "modulename": "zakat", "qualname": "Action.SUB", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.SUB: 4&gt;"}, {"fullname": "zakat.Action.ADD_FILE", "modulename": "zakat", "qualname": "Action.ADD_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.ADD_FILE: 5&gt;"}, {"fullname": "zakat.Action.REMOVE_FILE", "modulename": "zakat", "qualname": "Action.REMOVE_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.REMOVE_FILE: 6&gt;"}, {"fullname": "zakat.Action.BOX_TRANSFER", "modulename": "zakat", "qualname": "Action.BOX_TRANSFER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.BOX_TRANSFER: 7&gt;"}, {"fullname": "zakat.Action.EXCHANGE", "modulename": "zakat", "qualname": "Action.EXCHANGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.EXCHANGE: 8&gt;"}, {"fullname": "zakat.Action.REPORT", "modulename": "zakat", "qualname": "Action.REPORT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.REPORT: 9&gt;"}, {"fullname": "zakat.Action.ZAKAT", "modulename": "zakat", "qualname": "Action.ZAKAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.ZAKAT: 10&gt;"}, {"fullname": "zakat.JSONEncoder", "modulename": "zakat", "qualname": "JSONEncoder", "kind": "class", "doc": "<p>Extensible JSON <a href=\"https://json.org\">https://json.org</a> encoder for Python data structures.</p>\n\n<p>Supports the following objects and types by default:</p>\n\n<p>+-------------------+---------------+\n| Python            | JSON          |\n+===================+===============+\n| dict              | object        |\n+-------------------+---------------+\n| list, tuple       | array         |\n+-------------------+---------------+\n| str               | string        |\n+-------------------+---------------+\n| int, float        | number        |\n+-------------------+---------------+\n| True              | true          |\n+-------------------+---------------+\n| False             | false         |\n+-------------------+---------------+\n| None              | null          |\n+-------------------+---------------+</p>\n\n<p>To extend this to recognize other objects, subclass and implement a\n<code>.default()</code> method with another method that returns a serializable\nobject for <code>o</code> if possible, otherwise it should call the superclass\nimplementation (to raise <code>TypeError</code>).</p>\n", "bases": "json.encoder.JSONEncoder"}, {"fullname": "zakat.JSONEncoder.default", "modulename": "zakat", "qualname": "JSONEncoder.default", "kind": "function", "doc": "<p>Implement this method in a subclass such that it returns\na serializable object for <code>o</code>, or calls the base implementation\n(to raise a <code>TypeError</code>).</p>\n\n<p>For example, to support arbitrary iterators, you could\nimplement default like this::</p>\n\n<pre><code>def default(self, o):\n    try:\n        iterable = iter(o)\n    except TypeError:\n        pass\n    else:\n        return list(iterable)\n    # Let the base class default method raise the TypeError\n    return super().default(o)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "zakat.MathOperation", "modulename": "zakat", "qualname": "MathOperation", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "zakat.MathOperation.ADDITION", "modulename": "zakat", "qualname": "MathOperation.ADDITION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MathOperation.ADDITION: 1&gt;"}, {"fullname": "zakat.MathOperation.EQUAL", "modulename": "zakat", "qualname": "MathOperation.EQUAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MathOperation.EQUAL: 2&gt;"}, {"fullname": "zakat.MathOperation.SUBTRACTION", "modulename": "zakat", "qualname": "MathOperation.SUBTRACTION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MathOperation.SUBTRACTION: 3&gt;"}, {"fullname": "zakat.WeekDay", "modulename": "zakat", "qualname": "WeekDay", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "zakat.WeekDay.Monday", "modulename": "zakat", "qualname": "WeekDay.Monday", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;WeekDay.Monday: 0&gt;"}, {"fullname": "zakat.WeekDay.Tuesday", "modulename": "zakat", "qualname": "WeekDay.Tuesday", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;WeekDay.Tuesday: 1&gt;"}, {"fullname": "zakat.WeekDay.Wednesday", "modulename": "zakat", "qualname": "WeekDay.Wednesday", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;WeekDay.Wednesday: 2&gt;"}, {"fullname": "zakat.WeekDay.Thursday", "modulename": "zakat", "qualname": "WeekDay.Thursday", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;WeekDay.Thursday: 3&gt;"}, {"fullname": "zakat.WeekDay.Friday", "modulename": "zakat", "qualname": "WeekDay.Friday", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;WeekDay.Friday: 4&gt;"}, {"fullname": "zakat.WeekDay.Saturday", "modulename": "zakat", "qualname": "WeekDay.Saturday", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;WeekDay.Saturday: 5&gt;"}, {"fullname": "zakat.WeekDay.Sunday", "modulename": "zakat", "qualname": "WeekDay.Sunday", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;WeekDay.Sunday: 6&gt;"}, {"fullname": "zakat.start_file_server", "modulename": "zakat", "qualname": "start_file_server", "kind": "function", "doc": "<p>Starts a multi-purpose HTTP server to manage file interactions for a Zakat application.</p>\n\n<p>This server facilitates the following functionalities:</p>\n\n<ol>\n<li>GET /{file_uuid}/get: Download the database file specified by <code>database_path</code>.</li>\n<li>GET /{file_uuid}/upload: Display an HTML form for uploading files.</li>\n<li>POST /{file_uuid}/upload: Handle file uploads, distinguishing between:\n<ul>\n<li>Database File (.db): Replaces the existing database with the uploaded one.</li>\n<li>CSV File (.csv): Imports data from the CSV into the existing database.</li>\n</ul></li>\n</ol>\n\n<p>Args:\n    database_path (str): The path to the pickle database file.\n    database_callback (callable, optional): A function to call after a successful database upload.\n                                            It receives the uploaded database path as its argument.\n    csv_callback (callable, optional): A function to call after a successful CSV upload. It receives the uploaded CSV path,\n                                       the database path, and the debug flag as its arguments.\n    debug (bool, optional): If True, print debugging information. Defaults to False.</p>\n\n<p>Returns:\n    Tuple[str, str, str, threading.Thread, Callable[[], None]]: A tuple containing:\n        - file_name (str): The name of the database file.\n        - download_url (str): The URL to download the database file.\n        - upload_url (str): The URL to access the file upload form.\n        - server_thread (threading.Thread): The thread running the server.\n        - shutdown_server (Callable[[], None]): A function to gracefully shut down the server.</p>\n\n<p>Example:\n    _, download_url, upload_url, server_thread, shutdown_server = start_file_server(\"zakat.db\")\n    print(f\"Download database: {download_url}\")\n    print(f\"Upload files: {upload_url}\")\n    server_thread.start()\n    # ... later ...\n    shutdown_server()</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">database_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">database_callback</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">csv_callback</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.find_available_port", "modulename": "zakat", "qualname": "find_available_port", "kind": "function", "doc": "<p>Finds and returns an available TCP port on the local machine.</p>\n\n<p>This function utilizes a TCP server socket to bind to port 0, which\ninstructs the operating system to automatically assign an available\nport. The assigned port is then extracted and returned.</p>\n\n<p>Returns:\n    int: The available TCP port number.</p>\n\n<p>Raises:\n    OSError: If an error occurs during the port binding process, such\n        as all ports being in use.</p>\n\n<p>Example:\n    port = find_available_port()\n    print(f\"Available port: {port}\")</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "zakat.FileType", "modulename": "zakat", "qualname": "FileType", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "zakat.FileType.Database", "modulename": "zakat", "qualname": "FileType.Database", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;FileType.Database: &#x27;db&#x27;&gt;"}, {"fullname": "zakat.FileType.CSV", "modulename": "zakat", "qualname": "FileType.CSV", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;FileType.CSV: &#x27;csv&#x27;&gt;"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();